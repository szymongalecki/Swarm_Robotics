<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// System specification
const int N = 2;        // Number of robots
const int R = 1;        // Signal radius
const int STEP = 1;     // Step size
const int BETA = 1;     // Beta parameter
const int G = 3;        // Grid boundary =&gt; Grid : 2G x 2G
const int T_MAX = 1;    // Time threshold on invariant
clock C;                // Global clock 

// Data structures for implementation
int x[N];                    // List of x-axis coordinates for each robot
int y[N];                    // List of y-axis coordinates for each robot
int x_dir[N];                // List of x-axis directions for each robot
int y_dir[N];                // List of y-axis directions for each robot
// int neighbours[N][N] = {{0, 1, 1}, {1, 0, 1}, {1, 1, 0}}; // List of neighbours for each robot
int neighbours[N][N] = {{0, 1}, {1, 0}}; // List of neighbours for each robot
int last_neighbours[N][N];   // List of previous neighbours for each robot 
int lost_neighbours[N][N];   // List of lost neighbours : last_neighbours - neighbours
int shared_neighbours[N][N]; // List of shared neighbours with the lost neighbours
int shared[N];               // Count of shared neighbours with the lost neighbours
int distances[N][N];         // Integer part of mutual distances between robots (not used for connections)
// int k[N] = {N-1, N-1, N-1};   // Number of connections for each robot
int k[N] = {N-1, N-1};   // Number of connections for each robot
int last_k[N];               // Number of last connections for each robot

// Function specifying the desired system state which can be used for verification
bool special_case(int id){
    if (shared[0] == 2){
        return true;
    } 
    return false;
}

// Maps one of four directions into x-axis and y-axis directions
// Updates: x_dir, y_dir
void mapDirection(int id, int dir){
    if (dir == 0){
		// up
        x_dir[id] = 0;
        y_dir[id] = 1;
    }
    if (dir == 1){
		// right
        x_dir[id] = 1;
        y_dir[id] = 0;
    }
    if (dir == 2){
		// down
        x_dir[id] = 0;
        y_dir[id] = -1;
    }
    if (dir == 3){
		// left
        x_dir[id] = -1;
        y_dir[id] = 0;
    }
}

// Reverses current direction of the robot
// Updates: x_dir, y_dir
void reverseDirection(int id){
	x_dir[id] *= -1;
	y_dir[id] *= -1;
}

// Moves robot forward in its current direction
// Updates: x, y
void moveForward(int id){
	x[id] += x_dir[id] * STEP;
	y[id] += y_dir[id] * STEP;
}

// Checks if robot reached or passed the grid boundary
bool gridBoundary(int id){
    return abs(x[id]) &gt;= G || abs(y[id]) &gt;= G;
}

// 
void updateConnections(int id){
   int i;
   int n;
   last_k[id] = k[id];
   for (i = 0; i &lt; N; i++){
       if (neighbours[id][i] == 1){
           n++;
       }
   }
   k[id] = n;
}

// Decide if robot should make a random turn
bool turnRandom(int id){
    return k[id] &gt; last_k[id];
}

// Check if there are neighbours that were lost for a given robot
bool noLostNeighbours(int id){
    int i;
    for (i = 0; i &lt; N; i++){
        if(lost_neighbours[id][i] != 0){
            return false;
        }
    }
    return true;
}

// Decide if robot should turn around
bool turn180(int id){
    if (noLostNeighbours(id)){
        return false;
    }
    return shared[id] &lt;= BETA;
}

// Calculates Euclidean distance between robots
double distance(int x1, int y1, int x2, int y2){
    return sqrt(pow(abs(x1 - x2), 2) + pow(abs(y1 - y2), 2));
}

// Checks if distance between robots is within a signal threshold
bool connected(double distance, double threshold){
    return distance &lt;= threshold;
}

// Calculcates the distances between robots and saves the approximation
// Updates: distances
void updateDistances(){
    int i;
    int j;
    for (i = 0; i &lt; N; i++){
        for (j = 0; j &lt; N; j++){
            distances[i][j] = fint(distance(x[i], y[i], x[j], y[j]));
        }
    }
}

// Creates the list of lost neighbours
// Updates: lost_neighbours
void lostNeighbours(int id){
    int i;
    for (i = 0; i &lt; N; i++){
        if (last_neighbours[id][i] == 1 &amp;&amp; neighbours[id][i] == 0){
            lost_neighbours[id][i] = 1;
        } else {
            lost_neighbours[id][i] = 0;
        }
    }
}

// Finds and counts shared neighbours between id holder and robots from lost_neighbours
// Updates: shared_neighbours, shared
void sharedNeighbours(int id){
    int i; // lost robot - i
    int j; // neighbour of this robot - j
    
    // Clear entries for this robot
    for (i = 0; i &lt; N; i++){
        shared_neighbours[id][i] = 0;
        shared[id] = 0;
    }
    // If there are no lost neighbours, return
    if (noLostNeighbours(id)){
        return;
    }
    // Otherwise, count how many neighbours are connected to each lost robot i
    for (i = 0; i &lt; N; i++){
        // This robot got disconnected from robot i
        if (lost_neighbours[id][i] == 1){
            for (j = 0; j &lt; N; j++){
                // This robot is connected to robot j -&gt; neighbours[id][j] == 1 
                // Robot j is connected to lost robot i -&gt; neighbours[j][i] == 1
                if (neighbours[id][j] == 1 &amp;&amp; neighbours[j][i] == 1){
                    // This robot is connected to robot j that is connected to lost robot i
                    shared_neighbours[id][i] += 1;
                }
            }
        }
    }
    // Maximum number of shared neighbours for any lost robot i
    for (i = 0; i &lt; N; i++){
        if(shared_neighbours[id][i] &gt; shared[id]){
            shared[id] = shared_neighbours[id][i];
        }
    }
}


// Updates: last_neighbours, neighbours 
void updateNeighbours(int id){
    int i;
    last_neighbours[id] = neighbours[id];
    for (i = 0; i &lt; N; i++){
            if (connected(distance(x[id], y[id], x[i], y[i]), R) &amp;&amp; id != i){
                neighbours[id][i] = 1;
            } else {
                neighbours[id][i] = 0;
            }
    }
}

// Updates all data structures related to connectivity
// Updates: last_neighbours, neighbours, lost_neighbours, shared_neighbours, shared, k, last_k
void update(int id){
    updateNeighbours(id);
    lostNeighbours(id);
    sharedNeighbours(id);
    updateConnections(id);
}</declaration>
	<template>
		<name x="5" y="5">Robot</name>
		<parameter>int id</parameter>
		<declaration>// Place local declarations here.
clock t;</declaration>
		<location id="id0" x="-323" y="-340">
			<name x="-333" y="-374">turn_random</name>
			<committed/>
		</location>
		<location id="id1" x="-323" y="161">
			<name x="-297" y="135">turn_180</name>
			<committed/>
		</location>
		<location id="id2" x="-323" y="-110">
			<name x="-399" y="-135">forward</name>
			<label kind="invariant" x="-425" y="-110">t &lt;= T_MAX</label>
		</location>
		<location id="id3" x="289" y="-110">
			<name x="297" y="-144">if</name>
			<committed/>
		</location>
		<location id="id4" x="0" y="-340">
			<name x="-10" y="-374">else_if</name>
			<committed/>
		</location>
		<location id="id5" x="8" y="-110">
			<name x="-2" y="-144">grid</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="187" y="127">turn180(id)</label>
			<nail x="289" y="161"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-518" y="-17">reverseDirection(id)</label>
		</transition>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="34">gridBoundary(id)</label>
			<nail x="8" y="68"/>
			<nail x="-212" y="68"/>
		</transition>
		<transition id="id9">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="76" y="-144">!gridBoundary(id)</label>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="assignment" x="-238" y="-102">moveForward(id),
update(id),
t = 0</label>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-187" y="-255">!turnRandom(id)</label>
			<nail x="0" y="-221"/>
			<nail x="-221" y="-221"/>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-187" y="-374">turnRandom(id)</label>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="187" y="-374">!turn180(id)</label>
			<nail x="289" y="-341"/>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="select" x="-518" y="-238">dir : int[0,3]</label>
			<label kind="assignment" x="-518" y="-221">mapDirection(id, dir)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
P0 = Robot(0);
P1 = Robot(1);
// P2 = Robot(2);
//P3 = Robot(3);
//P4 = Robot(4);
 

// List one or more processes to be composed into a system.
system P0, P1;
//P2;
// P3;
//P4;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>A[] forall(i : int[0, N-1]) x[i] != G or y[i] != G</formula>
			<comment>There is no path for any robot that leads to the corner of the grid.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:20:23 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : int[0, N-1]) abs(x[i]) &lt;= G &amp;&amp; abs(y[i]) &lt;= G</formula>
			<comment>For all the paths, all robots stay within grid boundaries.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:23:23 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; C &gt; 0 and P0.turn_random</formula>
			<comment>There exists a path for robot P0 to reach location turn_random after initialisation.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:26:24 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; C &gt; 0 and P0.turn_180</formula>
			<comment>There exists a path for robot P0 to reach location turn_180 after initialisation.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:28:59 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] P0.forward imply P0.t &lt;= T_MAX</formula>
			<comment>For all the paths, robot P0 will obey the invariant on location forward.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:35:55 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; P0.turn_180 &amp;&amp; abs(x[0]) != G &amp;&amp; abs(y[0]) != G</formula>
			<comment>There exist a path for robot P0 to reach location turn_180 without reaching the boundary of the grid.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:42:32 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; P0.turn_180 &amp;&amp; (abs(x[0]) == G || abs(y[0]) == G)</formula>
			<comment>There exists a path for robot P0 to reach location turn_180 as a result of reaching the boundary of the grid.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:40:57 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; P0.forward &amp;&amp; k[0] &lt;= last_k[0]</formula>
			<comment>There exist a path for robot P0 where it moves forward without changing direction.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:43:19 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>All path of the system are free from deadlock.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 16:54:43 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] P0.t != 0 imply P0.forward</formula>
			<comment>For all the paths, robot P0 will have its clock value different than zero only in the forward state.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 17:03:40 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] (P0.turn_random or P0.turn_180 or P0.grid or P0.grid or P0.if or P0.else_if) imply P0.t == 0</formula>
			<comment>For all the paths, robot P0 will have its clock value equal to zero in the listed locations.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 17:26:23 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : int[0, N-1]) shared_neighbours[i][0] == 0 and shared_neighbours[i][1] == 0</formula>
			<comment>For all the paths, all robots have no shared neighbours. Two robots cannot have a neighbour in common.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 17:28:55 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : int[0, N-1]) C &lt; 0 imply k[i] == N-1</formula>
			<comment>For all paths, all robots with no set direction are fully connected as part of initialisation.</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 17:46:22 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : int[0, N-1]) C &gt; 0 imply x_dir[i] != 0 or y_dir[i] != 0</formula>
			<comment>For all paths, all robots have set direction after initialisation.
</comment>
			<result outcome="success" type="quality" timestamp="2024-11-11 17:35:48 +0100">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
	</queries>
</nta>
